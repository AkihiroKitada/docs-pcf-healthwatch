---
title: Healthwatch Metrics
owner: Healthwatch
---

This topic lists the metrics created by Healthwatch,
including Tanzu Application Service Exporter and Enterprise PKS Exporter.

<p class="note"><strong>Note</strong>: For external monitoring consumers,
  Healthwatch exposes the metrics that it creates through scrapable metrics endpoints.
  The metrics endpoints are secured by mTLS certs generated using Ops Manager CA cert.
</p>

## <a id='sli'></a>Platform Service Level Indicators

Healthwatch generates metrics that describe the health of several platform components.
These metrics can be used to calculate percent availability and error budgets.

### <a id='cf-cli'></a>Cloud Foundry CLI Health

The Cloud Foundry Command Line Interface (`cf` CLI) enables developers to create and manage apps on Tanzu Application Service. Healthwatch executes a continuous test suite to validate the core functions of the `cf` CLI.

The table below provides information about the `cf` CLI health smoke tests and the metrics that are generated for these tests.

<table class="nice">
<tr>
  <th>Test</th>
  <th>Metric</th>
  <th>Frequency</th>
  <th>Description</th>
</tr>
<tr>
  <td>Total test runs</td>
  <td><code>pas_sli_runs_total</code></td>
  <td>5 min</td>
  <td>Number of times the test suite has run.</td>
</tr>
<tr>
  <td>Total test fails</td>
  <td><code>pas_sli_failures_total</code></td>
  <td>5 min</td>
  <td>Number of times the test suite has failed. The test suite fails if any of the tasks fail.</td>
</tr>
<tr>
  <td>Total cf login fails</td>
  <td><code>pas_sli_task_failures_total{task="login"}</code></td>
  <td>5 min</td>
  <td>Number of times login has failed.</td>
</tr>
<tr>
  <td>Total cf push fails</td>
  <td><code>pas_sli_task_failures_total{task="push"}</code></td>
  <td>5 min</td>
  <td>Number of times push has failed.</td>
</tr>
<tr>
  <td>Total cf set-env fails</td>
  <td><code>pas_sli_task_failures_total{task="setEnv"}</code></td>
  <td>5 min</td>
  <td>Number of times set-env has failed.</td>
</tr>
<tr>
  <td>Total cf start fails</td>
  <td><code>pas_sli_task_failures_total{task="start"}</code></td>
  <td>5 min</td>
  <td>Number of times start has failed.</td>
</tr>
<tr>
  <td>Total cf logs fails</td>
  <td><code>pas_sli_task_failures_total{task="logs"}</code></td>
  <td>5 min</td>
  <td>Number of times logs has failed.</td>
</tr>
<tr>
  <td>Total cf stop fails</td>
  <td><code>pas_sli_task_failures_total{task="stop"}</code></td>
  <td>5 min</td>
  <td>Number of times stop has failed.</td>
</tr>
<tr>
  <td>Total cf delete fails</td>
  <td><code>pas_sli_task_failures_total{task="delete"}</code></td>
  <td>5 min</td>
  <td>Number of times delete has failed.</td>
</tr>
<tr>
  <td>Test app push time</td>
  <td><code>pas_sli_task_run_duration_seconds{task="push"}</code></td>
  <td>5 min</td>
  <td>Time in seconds</td>
</tr>
<tr>
  <td>Overall smoke test run time</td>
  <td><code>pas_sli_run_duration_seconds</code></td>
  <td>5 min</td>
  <td>Time in seconds</td>
</tr>
</table>


| Test            | Metric               | Frequency | Description                             |
|-----------------|----------------------|-----------|-----------------------------------------|
| Total test runs | `pas_sli_runs_total` | 5 min     | Number of times the test suite has run. |
|                 |                      |           |                                         |
|                 |                      |           |                                         |

pas_sli_durations_seconds_bucket
pas_sli_durations_seconds_count
pas_sli_durations_seconds_sum
pas_sli_exporter_status
pas_sli_failures_total
pas_sli_run_duration_seconds
pas_sli_runs_total
pas_sli_task_duration_seconds_bucket
pas_sli_task_duration_seconds_count
pas_sli_task_duration_seconds_sum
pas_sli_task_failures_total{task="delete"}
pas_sli_task_failures_total{task="login"}
pas_sli_task_failures_total{task="logs"}
pas_sli_task_failures_total{task="push"}
pas_sli_task_failures_total{task="setEnv"}
pas_sli_task_failures_total{task="start"}
pas_sli_task_failures_total{task="stop"}
pas_sli_task_run_duration_seconds{task="push"}
pas_sli_task_runs_total



<p class="note"><strong>Note</strong>: The Cloud Foundry CLI health checks each have a timeout of 2 minutes (default value).</p>

### <a id='pks-cli'></a>PKS CLI Health

The PKS Command Line Interface (PKS CLI) allows the operator to create and manage
Kubernetes clusters. Healthwatch executes a continuous test suite
to validate the core functions of the PKS CLI.

The table below provides information about the
PKS CLI Health smoke tests and the metrics that are generated for these tests.

<table class="nice">
<tr>
  <th>Test</th>
  <th>Metric</th>
  <th>Frequency</th>
  <th>Description</th>
</tr>
<tr>
  <td>Total test runs</td>
  <td><code>pks_sli_runs_total</code></td>
  <td>1 min</td>
  <td>Number of times the test suite runs.</td>
</tr>
<tr>
  <td>Total test fails</td>
  <td><code>pks_sli_failures_total</code></td>
  <td>1 min</td>
  <td>Number of times the test suite has failed. The test suite fails if any of the tasks fail.</td>
</tr>
<tr>
  <td>Total pks login fails</td>
  <td><code>pks_sli_task_failures_total{task="login"}</code></td>
  <td>1 min</td>
  <td>Number of times login has failed.</td>
</tr>
<tr>
  <td>Total pks clusters fails</td>
  <td><code>pks_sli_task_failures_total{task="clusters"}</code></td>
  <td>1 min</td>
  <td>Number of times list clusters has failed.</td>
</tr>
<tr>
  <td>Total pks get-credentials fails</td>
  <td><code>pks_sli_task_failures_total{task="get-credentials"}</code></td>
  <td>1 min</td>
  <td>Number of times get-credentials has failed. If there is no cluster created on the foundation,
  this metric will report success without actually executing get-credentials command.</td>
</tr>
<tr>
  <td>Total pks plans fails</td>
  <td><code>pks_sli_task_failures_total{task="plans"}</code></td>
  <td>1 min</td>
  <td>Number of times list plans has failed.</td>
</tr>
<tr>
  <td>Number of clusters</td>
  <td><code>pks_sli_number_of_clusters</code></td>
  <td>1 min</td>
  <td>Number of Kubernetes clusters managed by PKS broker.</td>
</tr>
<tr>
  <td>Get-credentials response time</td>
  <td><code>pks_sli_task_run_duration_seconds{task="get-credentials"}</code></td>
  <td>1 min</td>
  <td>Time in seconds</td>
</tr>
<tr>
  <td>Overall smoke test run time</td>
  <td><code>pks_sli_run_duration_seconds</code></td>
  <td>1 min</td>
  <td>Time in seconds</td>
</tr>
</table>


pks_sli_duration_seconds_bucket
pks_sli_duration_seconds_count
pks_sli_duration_seconds_sum
pks_sli_exporter_status
pks_sli_failures_total
pks_sli_number_of_clusters
pks_sli_run_duration_seconds
pks_sli_runs_total
pks_sli_task_duration_seconds_bucket
pks_sli_task_duration_seconds_count
pks_sli_task_duration_seconds_sum
pks_sli_task_failures_total{task="clusters"}
pks_sli_task_failures_total{task="get-credentials"}
pks_sli_task_failures_total{task="login"}
pks_sli_task_failures_total{task="plans"}
pks_sli_task_run_duration_seconds{task="get-credentials"}
pks_sli_task_runs_total


### <a id='bosh-health'></a>BOSH Health

BOSH is the technology behind Ops Manager to manage the
VMs deployed. If the BOSH Director is not responsive or functional, BOSH-managed VMs lose their resiliency. Healthwatch executes a continuous test suite
to validate the functionality of BOSH director.

The table below provides information about the metrics that are generated.

<table class="nice">
<tr>
  <th>Test</th>
  <th>Metric</th>
  <th>Frequency</th>
  <th>Description</th>
</tr>
<tr>
  <td>Total test runs</td>
  <td><code>bosh_sli_runs_total</code></td>
  <td>10 min</td>
  <td>Number of times the test suite runs.</td>
</tr>
<tr>
  <td>Total test fails</td>
  <td><code>bosh_sli_failures_total</code></td>
  <td>10 min</td>
  <td>Number of times the test suite has failed. The test suite fails if any of the tasks has failed.</td>
</tr>
<tr>
  <td>Total bosh deployments fails</td>
  <td><code>bosh_sli_task_failures_total{task="deployments"}</code></td>
  <td>10 min</td>
  <td>Number of times list deployments has failed.</td>
</tr>
<tr>
  <td>Total bosh deploy fails</td>
  <td><code>bosh_sli_task_failures_total{task="deploy"}</code></td>
  <td>10 min</td>
  <td>Number of times deploy has failed.</td>
</tr>
<tr>
  <td>Total bosh delete fails</td>
  <td><code>bosh_sli_task_failures_total{task="delete"}</code></td>
  <td>10 min</td>
  <td>Number of times delete deployment has failed.</td>
</tr>
<tr>
  <td>Total bosh tasks fails</td>
  <td><code>bosh_sli_task_failures_total{task="tasks"}</code></td>
  <td>10 min</td>
  <td>Number of times list running tasks has failed.</td>
</tr>
<tr>
  <td>BOSH task running</td>
  <td><code>bosh_deployments_status</code></td>
  <td>10 min</td>
  <td><code>1</code> = running or <code>0</code> = idle. If bosh tasks fails, this metric will report <code>0</code>.</td>
</tr>
<tr>
  <td>Overall smoke test run time</td>
  <td><code>bosh_sli_run_duration_seconds</code></td>
  <td>10 min</td>
  <td>Time in seconds</td>
</tr>
</table>

<p class="note"><strong>Note</strong>: Healthwatch deploys and deletes a VM named <code>bosh-health-exporter</code> as part of this test suite.</p>


bosh_deployment
bosh_deployments_status
bosh_sli_duration_seconds_bucket
bosh_sli_duration_seconds_count
bosh_sli_duration_seconds_sum
bosh_sli_exporter_status
bosh_sli_failures_total
bosh_sli_run_duration_seconds
bosh_sli_runs_total
bosh_sli_task_duration_seconds_bucket
bosh_sli_task_duration_seconds_count
bosh_sli_task_duration_seconds_sum
bosh_sli_task_failures_total{task="delete"}
bosh_sli_task_failures_total{task="deploy"}
bosh_sli_task_failures_total{task="deployments"}
bosh_sli_task_failures_total{task="tasks"}
bosh_sli_task_run_duration_seconds
bosh_sli_task_runs_total
health_bosh_deployment_probe_count
health_check_bosh_director_probe_availability
health_check_bosh_director_probe_count
health_check_bosh_director_success
healthwatch_boshExporter_ingressLatency_seconds_bucket
healthwatch_boshExporter_ingressLatency_seconds_count
healthwatch_boshExporter_ingressLatency_seconds_sum
healthwatch_boshExporter_ingress_envelopes
healthwatch_boshExporter_metricConversion_seconds_bucket
healthwatch_boshExporter_metricConversion_seconds_count
healthwatch_boshExporter_metricConversion_seconds_sum
healthwatch_boshExporter_status
ingestor_ingested_boshSystemMetrics


### <a id='cert-expiration'></a>Certificate Expiration Monitoring

Healthwatch exposes metrics about the expiration of certificates. For more information, see [here](common-configurations/certificate-monitoring.html).

The table below provides information about the metrics that are generated.

<table class="nice">
<tr>
  <th>Test</th>
  <th>Metric</th>
  <th>Frequency</th>
  <th>Description</th>
</tr>
<tr>
  <td>Certificate time to expire</td>
  <td><code>ssl_certificate_expiry_seconds{exported_instance=~".*"}</code></td>
  <td>1 min</td>
  <td>How long in seconds until certain certificate(s) expire.</td>
</tr>
</table>


probe_http_ssl
probe_ssl_earliest_cert_expiry
probe_ssl_last_chain_expiry_timestamp_seconds
ssl_certificate_expiry_seconds{exported_instance=~".*"}


### <a id='blackbox'></a>Canary URL Health

App availability and responsiveness issues can significantly impact the experience of end users.
Healthwatch allows operators to configure Canary URLs in the tile and expose whether the URL is running or not,
along with the response time metrics.

<table class="nice">
<tr>
  <th>Test</th>
  <th>Metric</th>
  <th>Frequency</th>
  <th>Description</th>
</tr>
<tr>
  <td>URL test success</td>
  <td><code>probe_success{instance=~".*"}</code></td>
  <td>15 s</td>
  <td><code>1</code> = pass or <code>0</code> = fail</td>
</tr>
<tr>
  <td>URL response time</td>
  <td><code>probe_duration_seconds</code></td>
  <td>15 s</td>
  <td>Time in seconds</td>
</tr>
</table>


probe_dns_lookup_time_seconds
probe_duration_seconds
probe_failed_due_to_regex
probe_http_content_length
probe_http_duration_seconds
probe_http_last_modified_timestamp_seconds
probe_http_redirects
probe_http_ssl
probe_http_status_code
probe_http_uncompressed_body_length
probe_http_version
probe_ip_addr_hash
probe_ip_protocol
probe_ssl_earliest_cert_expiry
probe_ssl_last_chain_expiry_timestamp_seconds
probe_success{instance=~".*"}
probe_tls_version_info
