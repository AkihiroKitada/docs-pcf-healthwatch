---
title: Using PCF Healthwatch
owner: PCF Healthwatch
---

This topic describes how to use Pivotal Cloud Foundry (PCF) Healthwatch.

##<a id='access'></a>Accessing PCF Healthwatch

You can access PCF Healthwatch and its data through the PCF Healthwatch UI or directly through the service datastore. In addition, PCF Healthwatch forwards the metrics that it creates into the Loggregator Firehose.

###<a id='ui'></a>Access the PCF Healthwatch UI

To access the PCF Healthwatch UI, do the following:

1. Navigate to `healthwatch.SYSTEM-DOMAIN`.
2. When prompted to log in, enter the username and password of a UAA user that has either the `healthwatch.read` scope or the `healthwatch.admin` scope.
    <br><br>
    The UAA admin user has both the `healthwatch.read` and `healthwatch.admin` scopes by default. If you want to log in with another UAA user, make this user a member of the `healthwatch.read` or `healthwatch.admin` group. For more information, including considerations for which scope to grant, see [Allow Additional Users to Access the PCF Healthwatch UI](installing.html#healthwatch-uaa-users).

###<a id='mysql'></a>Access Data Through MySQL

You can access metrics data through the PCF Healthwatch datastore. See [PCF Healthwatch Metrics](metrics.html) for the description of available data points.

The table below provides login information.

<table class="nice">
<tr>
  <td>URL</td>
  <td>MySQL VM IP</td>
</tr>
<tr>
  <td>Port</td>
  <td>3306</td>
</tr>
<tr>
  <td>Username</td>
  <td>MySQL Admin Password credentials in the PCF Healthwatch tile</td>
</tr>
<tr>
  <td>Password</td>
  <td>MySQL Admin Password credentials in the PCF Healthwatch tile</td>
</tr>
<tr>
  <td>Database</td>
  <td><code>platform_monitoring</code></td>
</tr>
<tr>
  <td>Tables</td>
  <td><code>value_metric_agg</code>, <code>counter_event_agg</code>, <code>super_value_metric</code>, <code>alert</code> and <code>alert_configuration</code></td>
</tr>
</table>

To access the MySQL datastore, you can do the following:

* **Method 1**. Use BOSH to SSH into the MySQL VM and run the `mysql -u root -p` command.

* **Method 2**. Assign an external IP to the MySQL VM and a firewall rule to open ports 3306 and 3308 and access MySQL externally.

* **Method 3**. Open a tunnel into your IaaS network and connect that way externally.

###<a id='firehose'></a>Access Super Metrics Through the Firehose

PCF Healthwatch forwards the super metrics that it creates into the [Loggregator Firehose](https://docs.pivotal.io/pivotalcf/loggregator/architecture.html#firehose) so that they can be picked up by existing Firehose consumers. Below is an example of a product-generated metric output received through a [Firehose nozzle](https://docs.pivotal.io/pivotalcf/loggregator/architecture.html#nozzles).

<pre class="terminal">
origin:"healthwatch" eventType:ValueMetric timestamp:1502293311588995438 deployment:"cf" job:"healthwatch-forwarder" index:"06231d64-ad9f-4112-8423-6b41f44c0cf5" ip:"10.0.4.82" valueMetric:&lt;name:"Firehose.LossRate.1H" value:0 unit:"hr"&gt;
</pre>

## <a id='accessing-healthwatch-data'></a>Accessing Healthwatch Data (API)
 From PAS 2.2.5, Healthwatch data can be directly accessed via PromQL queries to the Log Cache API. The Log Cache `/api/v1/query` and `/api/v1/query_range` API endpoints are [Prometheus compatible](https://prometheus.io/docs/prometheus/latest/querying/api/).
 For example, to get the number of free chunks over the past 2 minutes:
 ```
curl -G "https://log-cache.SYSTEM_URL/api/v1/query" --data-urlencode 'query=Diego_AvailableFreeChunks{source_id="healthwatch-forwarder"}[2m]' -H "Authorization: $(cf oauth-token)"
 {
  "status": "success",
  "data": {
    "resultType": "matrix",
    "result": [
      {
        "metric": {
          "deployment": "p-healthwatch-b8f99d6a724dbee699cc",
          "index": "2336cbbe-e526-45d4-816e-dd2352d4fa0c",
          "job": "healthwatch-forwarder",
          "origin": "healthwatch"
        },
        "values": [
          [
            1536166538000000000,
            "10"
          ],
          [
            1536166598000000000,
            "8"
          ]
        ]
      }
    ]
  }
}
 ```
 The values of `[ 1536166538000000000, "10" ]` and `[ 1536166598000000000, "8" ]` are telling us that there were 10 free chunks 2 minutes ago and 8 free chunks 1 minute ago.
 To find the promQL query for a metric, first remove `healthwatch.` from the beginning. Next, replace all non-alphanumeric characters with `_`. e.g. `healthwatch.Diego_AvailableFreeChunks` became `Diego_AvailableFreeChunks`.
Lastly, add `{source_id="healthwatch-forwarder"}` to the end, as Log Cache requires `source_id` for all queries.
 Please refer to the [Prometheus query documentation](https://prometheus.io/docs/prometheus/latest/querying/basics/) for options on the query syntax.
