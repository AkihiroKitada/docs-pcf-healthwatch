---
title: Alerting
owner: Healthwatch
---

## <a id='overview'></a> Overview

In Healthwatch, you can configure Prometheus to send alerts to Alertmanager according to alerting
rules you configure. Alertmanager then manages those alerts by removing duplicate alerts, grouping
alerts together, and routing those groups to alert receiver integrations such as email, PagerDuty,
or Slack. Alertmanager also silences and inhibits alerts according to the alerting rules you
configure.

For more information, see [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/)
in the Prometheus documentation.

## <a id='configure'></a> Configure Alerting

In the **Alertmanager Configuration** pane, you configure alerting rules, routing rules, and
alert receivers for Alertmanager to use.

The **Alertmanager Configuration** pane configures the Alertmanager configuration file. For
more information, see [Configuration](https://prometheus.io/docs/alerting/latest/configuration/)
in the Prometheus documentation.

To configure alerting through the **Alertmanager Configuration** pane:

1. Select **Alertmanager Configuration**.

1. For **Alerting Rules YAML**, provide in YAML format the rule statements that define which
alerts Alertmanager sends to your alert receivers:
  1. The following YAML files contain alerting rules for VMware Tanzu Application Service for
  VMs (TAS for VMs) and VMware Tanzu Kubernetes Grid Integrated Edition (TKGI). Choose the
  YAML file that corresponds to your runtime:
      * [TAS for VMs](tas_alerting_rules.yml)
      * [TKGI](tkg-i_alerting_rules.yml)
  1. Modify the YAML file according to the observability requirements for your foundation.
  1. Paste the contents of the YAML file into **Alerting Rules YAML**.
  <br>
  <br>
  For more information, see [Alerting Rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)
  in the Prometheus documentation.

1. For **Routing Rules YAML**, provide the route block that defines where Alertmanager sends
alerts, how frequently Alertmanager sends alerts, and how Alertmanager groups alerts together.
This route block appears in the `route` section of the Alertmanager configuration file. You
must define all `route` configuration parameters. For information about the parameters you
must provide, see [&#60;route>](https://prometheus.io/docs/alerting/latest/configuration/#route)
in _Configuration_ in the Prometheus documentation.

1. (Optional) For **Inhibit Rules YAML**, provide in YAML format the rule statements that define
which alerts Alertmanager does not send to your alert receivers. These rule statements appear
in the `inhibit_rules` section of the Alertmanager configuration file. For more information,
see [&#60;inhibit_rule>](https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule)
in _Configuration_ in the Prometheus documentation.

## <a id='receivers'></a> Alert Receivers

1. Configure the alert receivers that you specified in **Routing Rules YAML** in a previous
step. You can configure email, PagerDuty, Slack, and webhook alert receivers in the Healthwatch
tile. These alert receiver configurations appear in the `receivers` section of the Alertmanager
configuration file. For more information, see [&#60;receiver>](https://prometheus.io/docs/alerting/latest/configuration/#receiver)
in _Configuration_ in the Prometheus documentation.
  <div class='note'><strong>Notes:</strong>
    <ul>
    <li>
        The name you add your receiver as in the **Routing Rules YAML** needs to match the name you give your receiver.
    </li>
    <br>
      <li>You can also configure custom alert receiver integrations that are not natively supported
        by Alertmanager through webhook receivers. For more information about configuring custom
        alert receiver integrations, see <a href="https://prometheus.io/docs/alerting/latest/configuration/#webhook_config">&#60;webhook_config></a>
        in <em>Configuration</em> in the Prometheus documentation.</li>
      <br>
      <li>If you want to provide authentication and TLS communication settings for your alert
        receivers, you must provide them in the associated alert receiver configuration fields
        described below. If the base configuration YAML for your alert receivers include fields
        for authentication and TLS communication settings, do not include them when you provide
        the configuration YAML for your alert receivers in the <strong>Receiver Configuration</strong>
        fields.</li>
      <br>
      <li>If you configure two or more alert receivers with the same name, Alertmanager merges
        them into a single alert receiver. For more information, see <a href="#combine-receivers">
        Combining Alert Receivers</a> below.</li>
    </ul>
  </div>

    ### <a id='email'></a> Email Receivers
      1. Under **Email Receiver Configurations**, click **Add**.
      1. For **Receiver Name**, enter the name you want to give your email receiver.
      1. For **Receiver Configuration**, provide the configuration YAML for your email receiver.
      Do not prefix the configuration YAML with a dash. For more information about the YAML
      structure for this field, see [&#60;email_config>](https://prometheus.io/docs/alerting/latest/configuration/#email_config)
      in _Configuration_ in the Prometheus documentation.
      1. (Optional) To configure SMTP authentication between Alertmanager and your email receiver,
      configure the following fields:
          1. For **Authentication Password**, enter your SMTP authentication password.
          1. For **Authentication Secret**, enter your SMTP authentication secret.
      1. (Optional) To configure TLS communication between Alertmanager and your email receiver,
      configure the following fields:
          1. For **TLS Config Certificate Authority**, provide a certificate authority (CA)
          that signs the certificates you provide in the **TLS Config Certificate and Private
          Key** field below.
          1. For **TLS Config Certificate and Private Key**, provide at least one certificate
          and private key to enable TLS communication between Alertmanager and your email receiver.
          1. For **TLS Config Server Name**, enter the name of the SMTP server that facilitates
          TLS communication between Alertmanager and your email receiver.
          1. If the certificate you provided in the **TLS Config Certificate and Private Key**
          field is signed by a self-signed CA or a certificate that is signed by a self-signed
          CA, enable the **TLS Config Skip SSL Validation** checkbox to skip SSL validation
          during TLS handshakes.
          <br>
          <br>
          For more information about configuring TLS communication, see [&#60;tls_config>]
          (https://prometheus.io/docs/alerting/latest/configuration/#tls_config) in _Configuration_
          in the Prometheus documentation.

    ### <a id='pager-duty'></a> Pager Duty
      1. Under **PagerDuty Receiver Configurations**, click **Add**.
      1. For **Receiver Name**, enter the name you want to give your PagerDuty receiver.
      1. For **Receiver Configuration**, provide the configuration YAML for your PagerDuty
      receiver. Do not prefix the configuration YAML with a dash. For more information about
      the YAML structure for this field, see [&#60;pagerduty_config>](https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config)
      in _Configuration_ in the Prometheus documentation.
      1. Enter your PagerDuty integration key in one of the following fields:
          * If you selected Events API v2 as your integration type in PagerDuty, enter your
          PagerDuty integration key in **Routing Key**.
          * If you selected Prometheus as your integration type in PagerDuty, enter your PagerDuty
          integration key in **Service Key**.
      1. (Optional) To configure the HTTP client that your PagerDuty receiver uses to communicate
      with HTTP-based API services, configure one of the following options:
          * To configure your HTTP client to authenticate API services using basic authentication,
          enter the username and either the password or the password file associated with your
          HTTP client in **Basic Authorization**.
          * To configure your HTTP client to authenticate API services using a bearer token
          or bearer token file, enter either the bearer token or the filepath for the bearer
          token file associated with your HTTP client in **Bearer Token**.
          <br>
          <br>
          For more information about configuring an HTTP client, see [&#60;http_config>](https://prometheus.io/docs/alerting/latest/configuration/#http_config)
          in _Configuration_ in the Prometheus documentation.
      1. (Optional) To configure TLS communication between Alertmanager and your PagerDuty
      receiver, configure the following fields:
          1. For **TLS Config Certificate Authority**, provide a CA that signs the certificates
          you provide in the **TLS Config Certificate and Private Key** field below.
          1. For **TLS Config Certificate and Private Key**, provide at least one certificate
          and private key to enable TLS communication between Alertmanager and your PagerDuty
          receiver.
          1. For **TLS Config Server Name**, enter the name of the PagerDuty server that facilitates
          TLS communication between Alertmanager and your PagerDuty receiver.
          1. If the certificate you provided in the **TLS Config Certificate and Private Key**
          field is signed by a self-signed CA or a certificate that is signed by a self-signed
          CA, enable the **TLS Config Skip SSL Validation** checkbox to skip SSL validation
          during TLS handshakes.
          <br>
          <br>
          For more information about configuring TLS communication, see [&#60;tls_config>]
          (https://prometheus.io/docs/alerting/latest/configuration/#tls_config) in _Configuration_
          in the Prometheus documentation.

    ### <a id='slack'></a> Slack Receivers
      1. Under **Slack Receiver Configurations**, click **Add**.
      1. For **Receiver Name**, enter the name you want to give your Slack receiver.
      1. For **Receiver Configuration**, provide the configuration YAML for your Slack receiver.
      Do not prefix the configuration YAML with a dash. For more information about the YAML
      structure for this field, see [&#60;slack_config>](https://prometheus.io/docs/alerting/latest/configuration/#slack_config)
      in _Configuration_ in the Prometheus documentation.
      1. For **Slack API URL**, enter the Slack webhook URL for your Slack receiver.
      1. (Optional) To configure the HTTP client that your Slack receiver uses to communicate
      with HTTP-based API services, configure one of the following options:
          * To configure your HTTP client to authenticate API services using basic authentication,
          enter the username and either the password or the password file associated with your
          HTTP client in **Basic Authorization**.
          * To configure your HTTP client to authenticate API services using a bearer token
          or bearer token file, enter either the bearer token or the filepath for the bearer
          token file associated with your HTTP client in **Bearer Token**.
          <br>
          <br>
          For more information about configuring an HTTP client, see [&#60;http_config>](https://prometheus.io/docs/alerting/latest/configuration/#http_config)
          in _Configuration_ in the Prometheus documentation.
      1. (Optional) To configure TLS communication between Alertmanager and your Slack receiver,
      configure the following fields:
          1. For **TLS Config Certificate Authority**, provide a CA that signs the certificates
          you provide in the **TLS Config Certificate and Private Key** field below.
          1. For **TLS Config Certificate and Private Key**, provide at least one certificate
          and private key to enable TLS communication between Alertmanager and your Slack receiver.
          1. For **TLS Config Server Name**, enter the name of the Slack server that facilitates
          TLS communication between Alertmanager and your Slack receiver.
          1. If the certificate you provided in the **TLS Config Certificate and Private Key**
          field is signed by a self-signed CA or a certificate that is signed by a self-signed
          CA, enable the **TLS Config Skip SSL Validation** checkbox to skip SSL validation
          during TLS handshakes.
          <br>
          <br>
          For more information about configuring TLS communication, see [&#60;tls_config>]
          (https://prometheus.io/docs/alerting/latest/configuration/#tls_config) in _Configuration_
          in the Prometheus documentation.

    ### <a id='webhook'></a> Webhook Receivers
      1. Under **Webhook Receiver Configurations**, click **Add**.
      1. For **Receiver Name**, enter the name you want to give your webhook receiver.
      1. For **Receiver Configuration**, provide the configuration YAML for your webhook receiver.
      Do not prefix the configuration YAML with a dash. For more information about the YAML
      structure for this field, see [&#60;webhook_config>](https://prometheus.io/docs/alerting/latest/configuration/#webhook_config)
      in _Configuration_ in the Prometheus documentation.
      1. (Optional) To configure the HTTP client that your webhook receiver uses to communicate
      with HTTP-based API services, configure one of the following options:
          * To configure your HTTP client to authenticate API services using basic authentication,
          enter the username and either the password or the password file associated with your
          HTTP client in **Basic Authorization**.
          * To configure your HTTP client to authenticate API services using a bearer token
          or bearer token file, enter either the bearer token or the filepath for the bearer
          token file associated with your HTTP client in **Bearer Token**.
          <br>
          <br>
          For more information about configuring an HTTP client, see [&#60;http_config>](https://prometheus.io/docs/alerting/latest/configuration/#http_config)
          in _Configuration_ in the Prometheus documentation.
      1. (Optional) To configure TLS communication between Alertmanager and your webhook receiver,
      configure the following fields:
          1. For **TLS Config Certificate Authority**, provide a CA that signs the certificates
          you provide in the **TLS Config Certificate and Private Key** field below.
          1. For **TLS Config Certificate and Private Key**, provide at least one certificate
          and private key to enable TLS communication between Alertmanager and your webhook
          receiver.
          1. For **TLS Config Server Name**, enter the name of the webhook server that facilitates
          TLS communication between Alertmanager and your webhook receiver.
          1. If the certificate you provided in the **TLS Config Certificate and Private Key**
          field is signed by a self-signed CA or a certificate that is signed by a self-signed
          CA, enable the **TLS Config Skip SSL Validation** checkbox to skip SSL validation
          during TLS handshakes.
          <br>
          <br>
          For more information about configuring TLS communication, see [&#60;tls_config>]
          (https://prometheus.io/docs/alerting/latest/configuration/#tls_config) in _Configuration_
          in the Prometheus documentation.

1. Click **Save**.


## <a id='combine-receivers'></a> Combining Alert Receivers

If you configure two or more alert receivers with the same name, Alertmanager merges them into
a single alert receiver. For example, if you configure:

* Two email receivers named "Foundation" with distinct email addresses
* One PagerDuty receiver named "Foundation"
* One email receiver named "Clusters"

Then Alertmanager merges them into the following alert receivers:

* One alert receiver named "Foundation" containing two email configurations and a PagerDuty
configuration
* One alert receiver named "Clusters" containing one email configuration

The example below shows how Alertmanager combines the alert receivers described above in
its configuration file:

```
receivers:
- name: 'Foundation'
  email_configs:
  - to: 'operator1@example.org'
    from: global.smtp_from
    smarthost: global.smtp_smarthost
    hello: global.smtp_hello
    html: '{{ template "email.default.html" . }}'
    text: "This is an alert."
  - to: 'operator2@example.org'
    from: global.smtp_from
    smarthost: global.smtp_smarthost
    hello: global.smtp_hello
    html: '{{ template "email.default.html" . }}'
    text: "This is an alert."
  pagerduty_configs:
  - service_key: operator-1-key
    url: global.pagerduty_url
    client: '{{ template "pagerduty.default.client" . }}'
    client_url: '{{ template "pagerduty.default.clientURL" . }}'
    description: '{{ template "pagerduty.default.description" .}}'
    severity: 'error'

- name: 'Clusters'
  email_configs:
  - to: 'operator1@example.org'
    from: global.smtp_from
    smarthost: global.smtp_smarthost
    hello: global.smtp_hello
    html: '{{ template "email.default.html" . }}'
    text: "This is an alert."
```
